// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  userType      UserType  @default(JOB_SEEKER) @map("user_type")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]

  // Job Seeker specific fields
  jobSeekerProfile JobSeekerProfile?

  // Job Provider specific fields
  jobProviderProfile JobProviderProfile?
  jobs               Job[]
  applications       Application[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model JobSeekerProfile {
  id          String  @id @default(cuid())
  userId      String  @unique @map("user_id")
  firstName   String? @map("first_name") @db.VarChar(100)
  lastName    String? @map("last_name") @db.VarChar(100)
  phone       String? @db.VarChar(20)
  location    String? @db.VarChar(255)
  bio         String? @db.Text
  skills      String? @db.Text
  experience  String? @db.VarChar(50)
  education   String? @db.Text
  resume      String? @db.VarChar(500) // URL to resume file
  linkedinUrl String? @map("linkedin_url") @db.VarChar(500)
  githubUrl   String? @map("github_url") @db.VarChar(500)
  portfolio   String? @db.VarChar(500) // Portfolio website URL
  availability String? @db.VarChar(50) // Available to start
  salaryExpectation String? @map("salary_expectation") @db.VarChar(100)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("job_seeker_profiles")
}

model JobProviderProfile {
  id          String  @id @default(cuid())
  userId      String  @unique @map("user_id")
  companyName String  @map("company_name") @db.VarChar(255)
  website     String? @db.VarChar(500)
  industry    String? @db.VarChar(100)
  companySize String? @map("company_size") @db.VarChar(50)
  location    String? @db.VarChar(255)
  description String? @db.Text
  logo        String? @db.VarChar(500) // URL to company logo
  foundedYear Int?    @map("founded_year")
  contactEmail String? @map("contact_email") @db.VarChar(255)
  contactPhone String? @map("contact_phone") @db.VarChar(20)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("job_provider_profiles")
}

model Job {
  id          String    @id @default(cuid())
  title       String    @db.VarChar(255)
  description String    @db.Text
  company     String    @db.VarChar(255)
  location    String    @db.VarChar(255)
  salary      String?   @db.VarChar(100)
  jobType     JobType   @default(FULL_TIME) @map("job_type")
  experience  String?   @db.VarChar(100)
  skills      String?   @db.Text
  requirements String?  @db.Text // Job requirements
  benefits    String?   @db.Text // Job benefits
  isActive    Boolean   @default(true) @map("is_active")
  isRemote    Boolean   @default(false) @map("is_remote")
  applicationDeadline DateTime? @map("application_deadline")
  postedById  String    @map("posted_by_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  postedBy     User          @relation(fields: [postedById], references: [id], onDelete: Cascade)
  applications Application[]

  @@map("jobs")
}

model Application {
  id          String            @id @default(cuid())
  jobId       String            @map("job_id")
  userId      String            @map("user_id")
  status      ApplicationStatus @default(PENDING)
  coverLetter String?           @map("cover_letter") @db.Text
  resume      String?           @db.VarChar(500) // URL to resume file
  notes       String?           @db.Text // Internal notes from recruiter
  interviewDate DateTime?       @map("interview_date")
  feedback    String?           @db.Text // Feedback from interviewer
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
  @@map("applications")
}

enum UserType {
  JOB_SEEKER
  JOB_PROVIDER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  FREELANCE
  INTERNSHIP
  REMOTE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  ACCEPTED
  REJECTED
  WITHDRAWN
}
